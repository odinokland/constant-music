import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id 'net.darkhax.curseforgegradle'
    id "com.modrinth.minotaur"
}
base {
    archivesName = "${mod_id}-${project.name}-${minecraft_version}"
}

def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}

runs {
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    if (neoforge_snapshot_url) {
        maven {
            url = neoforge_snapshot_url
            content {
                includeModule('net.neoforged', 'testframework')
                includeModule('net.neoforged', 'neoforge')
            }
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
}

def supportedMinecraftVersions = game_versions.split(',') as List<String>

modrinth {
    token = findProperty("modrinth_token") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "constant-music" // This can be the project ID or the slug. Either will work!
    versionName = "[NeoForge ${minecraft_version}+] v${project.version}"
    versionType = project.modrinth_release_type
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = supportedMinecraftVersions // Must be an array, even with only one version
    loaders = ["neoforge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    syncBodyFrom = rootProject.file("README.md").text
    changelog = file('../changelog.md').text
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
    }
}

tasks.register('curseforgeRelease', TaskPublishCurseForge) {
    description = 'Publishes the NeoForge build to CurseForge.'
    group = 'publishing'
    apiToken = findProperty('curseforge_token')
    debugMode = false

    // The main file to upload
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.releaseType = curseforge_release_type
    mainFile.changelog = file('../changelog.md')
    mainFile.changelogType = 'markdown'
    mainFile.addModLoader("NeoForge")
    mainFile.displayName = "[NeoForge ${minecraft_version}+] v${project.version}"
    supportedMinecraftVersions.each {mainFile.addGameVersion(it.trim())}

    // The sources JAR
//    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
//    sourcesFile.changelog = file('../changelog.md')
//    sourcesFile.addRequirement('fabric-api')
//    sourcesFile.addRequirement('architectury-api')
//    sourcesFile.addOptional('cloth-config')

    // The JavaDoc JAR
//    def javadocFile = mainFile.withAdditionalFile(javadocJar)
//    javadocFile.changelog = 'This is a test JavaDoc file!'
//    javadocFile.displayName = "JavaDoc - ${version}"
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)