import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'multiloader-loader'
    id 'net.neoforged.gradle.userdev' version '7.0.107'
    id 'net.darkhax.curseforgegradle'
    id "com.modrinth.minotaur"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
def at = file('src/main/resources/META-INF/accesstransformer.cfg')
if (at.exists()) {
    minecraft.accessTransformers.file at
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
}

def supportedMinecraftVersions = game_versions.split(',') as List<String>

modrinth {
    token = findProperty("modrinth_token") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "constant-music" // This can be the project ID or the slug. Either will work!
    versionName = "[NeoForge ${minecraft_version}+] v${project.version}"
    versionType = project.modrinth_release_type
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = supportedMinecraftVersions // Must be an array, even with only one version
    loaders = ["neoforge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    syncBodyFrom = rootProject.file("README.md").text
    changelog = file('../changelog.md').text
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
    }
}

tasks.register('curseforgeRelease', TaskPublishCurseForge) {
    description = 'Publishes the NeoForge build to CurseForge.'
    group = 'publishing'
    apiToken = findProperty('curseforge_token')
    debugMode = false

    // The main file to upload
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.releaseType = curseforge_release_type
    mainFile.changelog = file('../changelog.md')
    mainFile.changelogType = 'markdown'
    mainFile.addModLoader("NeoForge")
    mainFile.displayName = "[NeoForge ${minecraft_version}+] v${project.version}"
    supportedMinecraftVersions.each {mainFile.addGameVersion(it.trim())}
    mainFile.addEnvironment('Client')

    // The sources JAR
//    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
//    sourcesFile.changelog = file('../changelog.md')
//    sourcesFile.addRequirement('fabric-api')
//    sourcesFile.addRequirement('architectury-api')
//    sourcesFile.addOptional('cloth-config')

    // The JavaDoc JAR
//    def javadocFile = mainFile.withAdditionalFile(javadocJar)
//    javadocFile.changelog = 'This is a test JavaDoc file!'
//    javadocFile.displayName = "JavaDoc - ${version}"
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)