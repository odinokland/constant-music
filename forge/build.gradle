import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
}

base {
    archivesName = rootProject.archives_base_name + "-forge"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "constantmusic-common.mixins.json"
        mixinConfig "constantmusic.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("me.shedaniel.cloth:cloth-config-forge:12.0.111")

    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    include 'com.moandjiezana.toml:toml4j:0.7.2'
    forgeRuntimeLibrary 'com.moandjiezana.toml:toml4j:0.7.2'
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand  "version": project.version,
                "mod_version": project.mod_version,
                "mod_license": project.mod_license,
                "mod_id": project.mod_id,
                "mod_title": project.mod_title,
                "mod_author": project.mod_author,
                "mod_description": project.mod_description
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

modrinth {
    token = findProperty("modrinth_token") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "constant-music" // This can be the project ID or the slug. Either will work!
    versionName = "[Forge 1.20+] v${project.mod_version}"
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ['1.20.1', '1.20.2', '1.20.3', '1.20.4'] // Must be an array, even with only one version
    loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    syncBodyFrom = rootProject.file("README.md").text
    changelog = file('../changelog.md').text
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "architectury-api" // Creates a new required dependency on Fabric API
        optional.project "cloth-config"
    }
}

tasks.register('publishCurseforgeForge', TaskPublishCurseForge) {

    apiToken = findProperty('curseforge_token')
    debugMode = false

    // The main file to upload
    def mainFile = upload(949032, remapJar)
    mainFile.releaseType = 'release'
    mainFile.changelog = file('../changelog.md')
    mainFile.changelogType = 'markdown'
    mainFile.addModLoader("Forge")
    mainFile.displayName = "[Forge 1.20+] v${project.mod_version}"
    mainFile.addGameVersion('1.20.1', '1.20.2', '1.20.3', '1.20.4')
    mainFile.addRequirement('architectury-api')
    mainFile.addOptional('cloth-config')

    // The sources JAR
//    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
//    sourcesFile.changelog = file('../changelog.md')
//    sourcesFile.addRequirement('fabric-api')
//    sourcesFile.addRequirement('architectury-api')
//    sourcesFile.addOptional('cloth-config')

    // The JavaDoc JAR
//    def javadocFile = mainFile.withAdditionalFile(javadocJar)
//    javadocFile.changelog = 'This is a test JavaDoc file!'
//    javadocFile.displayName = "JavaDoc - ${version}"
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)