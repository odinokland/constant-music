name: "Build"

on:
    push:
        branches:
            - "**"
    pull_request:
        branches:
            - "**"
            - "!master"

jobs:
    build:
        runs-on: ubuntu-latest
        name: Run build
        timeout-minutes: 60

        steps:
            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            -   name: "Set up JDK"
                uses: actions/setup-java@v4
                with:
                    java-version: 21
                    distribution: temurin

            -   name: "Setup gradle"
                uses: gradle/actions/setup-gradle@v4
                with:
                    cache-read-only: false
                    gradle-version: wrapper
                    add-job-summary: 'on-failure'

            -   name: "Parse gradle properties"
                id: gradle-properties
                run: ./.github/scripts/parse-gradle-properties.sh

            -   name: "Run build (with heartbeat)"
                shell: bash
                run: |
                    ./gradlew build --info &
                    GRADLE_PID=$!
                    (while kill -0 $GRADLE_PID 2> /dev/null; do echo "Still building..."; sleep 60; done) &
                    WAITER_PID=$!
                    wait $GRADLE_PID
                    BUILD_RESULT=$?
                    kill $WAITER_PID
                    exit $BUILD_RESULT

            -   name: "Prepare artifacts (Unix)"
                if: runner.os != 'Windows'
                run: |
                    mkdir -p artifacts
                    find . -path "./*/versions/*/build/libs/*.jar" ! -name "*-common*.jar" ! -name "*-thin*.jar" ! -name "*-sources*.jar" ! -name "*-javadoc*.jar" -exec cp {} artifacts/ \;
            -   name: "Prepare artifacts (Windows CMD)"
                if: runner.os == 'Windows'
                shell: cmd
                run: |
                    @echo off
                    setlocal enabledelayedexpansion
                    
                    set "ROOT_DIR=%cd%"
                    set "TARGET_DIR=%ROOT_DIR%\artifacts"
                    
                    REM Create artifacts directory
                    if not exist "!TARGET_DIR!" (
                        mkdir "!TARGET_DIR!"
                    )
                    
                    REM Find all 'versions' directories recursively
                    for /d /r "%ROOT_DIR%" %%D in (versions) do (
                        REM Search for .jar files under each versions\*\build\libs directory
                        for /r "%%D" %%F in (*.jar) do (
                            set "file=%%~nxF"
                            set "fullpath=%%F"
                    
                            REM Check for correct directory pattern
                            echo "%%F" | findstr /R /I "\\versions\\[^\\]*\\build\\libs\\.*\.jar" >nul
                            if !errorlevel! == 0 (
                                REM Exclude jars with -common, -sources, -thin
                                echo !file! | findstr /I "-common -sources -thin" >nul
                                if errorlevel 1 (
                                    echo Copying: !file!
                                    copy /Y "!fullpath!" "!TARGET_DIR!\"
                                )
                            )
                        )
                    )
                    
                    echo Done collecting JARs.


#            -   name: "Prepare artifacts (Windows)"
#                if: runner.os == 'Windows'
#                shell: pwsh
#                run: |
#                    New-Item -ItemType Directory -Path artifacts -Force | Out-Null
#                    Get-ChildItem -Path '.\*\versions\*\build\libs\*.jar' -File -Recurse -ErrorAction SilentlyContinue |
#                        Where-Object { $_.Name -notlike '*-common*.jar' } |
#                        Copy-Item -Destination 'artifacts' -Force
            

            -   name: "Upload artifacts"
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ steps.gradle-properties.outputs.MOD_ID }}-artifacts-${{ steps.gradle-properties.outputs.MOD_VERSION }}
                    if-no-files-found: error
                    path: artifacts/*.jar

            -   name: "Generate matrix for the run job"
                id: set-matrix
                run: ./.github/scripts/generate-run-matrix.sh

    generate-build-matrix:
        runs-on: ubuntu-latest
        name: Generate build matrix
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    fetch-depth: 1

            -   name: "Generate matrix for the run job"
                id: set-matrix
                run: ./.github/scripts/generate-run-matrix.sh

    run-client:
        runs-on: ubuntu-latest
        needs: [build, generate-build-matrix]
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}

        name: Run ${{ matrix.mod_loader }} ${{ matrix.version }} ${{ matrix.script }} client
        timeout-minutes: 60

        steps:
            -   name: "Checkout repository"
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0

            - name: "Set up JDK"
              uses: actions/setup-java@v4
              with:
                  java-version:  |
                      17
                      21
                  distribution: temurin

            -   name: "Parse gradle properties"
                id: gradle-properties
                run: ./.github/scripts/parse-gradle-properties.sh ${{ matrix.version }}

            -   name: "Download artifacts"
                uses: actions/download-artifact@v4
                with:
                    name: ${{ steps.gradle-properties.outputs.MOD_ID }}-artifacts-${{ steps.gradle-properties.outputs.MOD_VERSION }}
                    path: artifacts

            -   name: "Copy mod jar to run/mods"
                run: mkdir -p run/mods && cp artifacts/${{ steps.gradle-properties.outputs.MOD_ID }}-${{ matrix.mod_loader }}-${{ steps.gradle-properties.outputs.MOD_VERSION }}+mc${{ matrix.version }}.jar run/mods

#            -   name: "Download ResourcefulLib"
#                run: |
#                    MOD_URL=$(./.github/scripts/get-modrinth-dependency-url.sh "resourceful-lib" "${{ steps.gradle-properties.outputs.DEPS_RESOURCEFUL_LIB_LIB }}" "${{ matrix.mod_loader }}")
#                    wget -P run/mods "$MOD_URL"
#
#            -   name: "Download YACL"
#                run: |
#                    MOD_URL=$(./.github/scripts/get-modrinth-dependency-url.sh "yacl" "${{ steps.gradle-properties.outputs.DEPS_YACL }}-${{ matrix.mod_loader }}" "${{ matrix.mod_loader }}")
#                    wget -P run/mods "$MOD_URL"

            -   name: Run ${{ matrix.version }} ${{ matrix.mod_loader }} client
                uses: 3arthqu4ke/mc-runtime-test@3.1.0
                with:
                    mc: ${{ matrix.version }}
                    modloader: ${{ matrix.mod_loader }}
                    regex: .*${{ matrix.mod_loader }}.*
                    mc-runtime-test: ${{ matrix.mod_loader }}
                    java: ${{ steps.gradle-properties.outputs.JAVA_VERSION }}
                    fabric-api: ${{ steps.gradle-properties.outputs.DEPS_FABRIC_API }}
                    xvfb: false
                    headlessmc-command: -lwjgl --retries 3 --jvm -Djava.awt.headless=true
                    cache-mc: true
#
#    run-server:
#        runs-on: ubuntu-latest
#        needs: [build, generate-build-matrix]
#        strategy:
#            fail-fast: false
#            matrix: ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}
#
#        name: Run ${{ matrix.mod_loader }} ${{ matrix.version }} ${{ matrix.script }} server
#        timeout-minutes: 60
#
#        steps:
#            -   name: "Checkout repository"
#                uses: actions/checkout@v4
#                with:
#                    fetch-depth: 0
#
#            - name: "Set up JDK"
#              uses: actions/setup-java@v4
#              with:
#                  java-version: 21
#                  distribution: temurin
#
#            -   name: "Parse gradle properties"
#                id: gradle-properties
#                run: ./.github/scripts/parse-gradle-properties.sh ${{ matrix.version }}
#
#            -   name: "Download artifacts"
#                uses: actions/download-artifact@v4
#                with:
#                    name: ${{ steps.gradle-properties.outputs.MOD_ID }}-artifacts-${{ steps.gradle-properties.outputs.MOD_VERSION }}
#                    path: artifacts
#
#            -   name: "Copy mod jar to run/mods"
#                run: mkdir -p run/mods && cp artifacts/${{ steps.gradle-properties.outputs.MOD_ID }}-${{ matrix.mod_loader }}-${{ steps.gradle-properties.outputs.MOD_VERSION }}+mc${{ matrix.version }}.jar run/mods
#
#            -   name: Run ${{ matrix.version }} ${{ matrix.mod_loader }} server
#                uses: headlesshq/mc-server-test@1.0.0
#                with:
#                    mc: ${{ matrix.version }}
#                    modloader: ${{ matrix.mod_loader }}
#                    java: ${{ steps.gradle-properties.outputs.JAVA_VERSION }}
#                    fabric-api: ${{ steps.gradle-properties.outputs.DEPS_FABRIC_API }}
#                    headlessmc-command: -lwjgl --retries 3 --jvm -Djava.awt.headless=true
#                    cache-mc: true